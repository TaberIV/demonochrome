<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alphaLevel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_player)) {
    colorCollected = obj_player.yellow + obj_player.red + obj_player.blue;
    colorLeft = instance_number(obj_enemy_yellow) + instance_number(obj_enemy_red) + instance_number(obj_enemy_blue);
    if (alphaLevel &lt; colorCollected / (colorLeft + colorCollected)) {
        alphaLevel += .001;
    }
    else {
        alphaLevel = colorCollected / (colorLeft + colorCollected);
    }
}

switch (global.theme) {
    case "mountain":
        background0_x = view_xview / 2;
        background0_y = view_yview;
        background1_x = view_xview / 4;
        background1_y = view_yview / 2 + 32;
        background2_x = view_xview / 8;
        background2_y = view_yview / 4 + 64;
        
        draw_background(bkg_sky0, background0_x, background0_y);
        draw_background(bkg_sky1, background0_x + 2048, background0_y);
        draw_background(bkg_sky2, background0_x + 4096, background0_y);
        draw_set_alpha(alphaLevel);
        draw_background(bkg_sky_black0, background0_x, background0_y);
        draw_background(bkg_sky_black1, background0_x + 2048, background0_y);
        draw_background(bkg_sky_black2, background0_x + 4096, background0_y);
        draw_set_alpha(1);
        draw_background(bkg_mountain0, background0_x, background1_y);
        draw_background(bkg_mountain1, background0_x + 2048, background1_y);
        draw_background(bkg_mountain2, background0_x + 4096, background1_y);
        draw_set_alpha(alphaLevel);
        draw_background(bkg_mountain0_black, background0_x, background1_y);
        draw_background(bkg_mountain1_black, background0_x + 2048, background1_y);
        draw_background(bkg_mountain2_black, background0_x + 4096, background1_y);
        draw_set_alpha(1);
        draw_background(bkg_mountain_front0, background0_x, background2_y);
        draw_background(bkg_mountain_front1, background0_x + 2048, background2_y);
        draw_background(bkg_mountain_front2, background0_x + 4096, background2_y);
        draw_set_alpha(alphaLevel);
        draw_background(bkg_mountain_front0_black, background0_x, background2_y);
        draw_background(bkg_mountain_front1_black, background0_x + 2048, background2_y);
        draw_background(bkg_mountain_front2_black, background0_x + 4096, background2_y);
        draw_set_alpha(1);
        break;
    case "forest":
        background0_x = view_xview / 2;
        background0_y = view_yview;
        background1_x = view_xview / 4;
        background1_y = view_yview / 2 + 128;
        background2_x = view_xview / 8;
        background2_y = view_yview / 4 + 128;
        background3_x = view_xview / 16;
        background3_y = view_yview / 8 + 128;
        
        draw_background(bkg_forest1_1, background0_x, background0_y);
        draw_background(bkg_forest1_2, background0_x + 2048, background0_y);
        draw_background(bkg_forest1_3, background0_x + 4096, background0_y);
        draw_set_alpha(alphaLevel);
        draw_background(bkg_forest1_black1, background0_x, background0_y);
        draw_background(bkg_forest1_black2, background0_x + 2048, background0_y);
        draw_background(bkg_forest1_black3, background0_x + 4096, background0_y);
        draw_set_alpha(1);
        draw_background(bkg_forest2_1, background1_x, background1_y);
        draw_background(bkg_forest2_2, background1_x + 2048, background1_y);
        draw_background(bkg_forest2_3, background1_x + 4096, background1_y);
        draw_set_alpha(alphaLevel);
        draw_background(bkg_forest2_black1, background1_x, background1_y);
        draw_background(bkg_forest2_black2, background1_x + 2048, background1_y);
        draw_background(bkg_forest2_black3, background1_x + 4096, background1_y);
        draw_set_alpha(1);
        draw_background(bkg_forest3_1, background2_x, background2_y);
        draw_background(bkg_forest3_2, background2_x + 2048, background2_y);
        draw_background(bkg_forest3_3, background2_x + 4096, background2_y);
        draw_set_alpha(alphaLevel);
        draw_background(bkg_forest3_black1, background2_x, background2_y);
        draw_background(bkg_forest3_black2, background2_x + 2048, background2_y);
        draw_background(bkg_forest3_black3, background2_x + 4096, background2_y);
        draw_set_alpha(1);
        draw_background(bkg_forest4_1, background3_x, background3_y);
        draw_background(bkg_forest4_2, background3_x + 2048, background3_y);
        draw_background(bkg_forest4_3, background3_x + 4096, background3_y);
        draw_set_alpha(alphaLevel);
        draw_background(bkg_forest4_black1, background3_x, background3_y);
        draw_background(bkg_forest4_black2, background3_x + 2048, background3_y);
        draw_background(bkg_forest4_black3, background3_x + 4096, background3_y);
        draw_set_alpha(1);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
