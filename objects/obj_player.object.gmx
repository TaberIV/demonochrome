<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialize variables
grav = 2; //Grav looks okay from .2 to 5
hsp = 0;
vsp = 0;

run_speed = 20;
air_speed = 10;
movespeed = run_speed;

dashspeed = 50;
dashing = false;
//Sets jumpspeed to the right amount to rise n pixels
height = 2 * 32;
jumpspeed = sqrt(2 * height * grav) + 2;

jump = 0;
jumpShort = false;

can_act = true;
shoot = false;
shooting = false;
shoot_time = true;

yellow = 0;
red = 0;
blue = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_act = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>shoot_time = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get player input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);

key_jump = keyboard_check(vk_space);
key_jump_pressed = keyboard_check_pressed(vk_space);

key_shoot = keyboard_check(vk_control);
key_shoot_pressed = keyboard_check_pressed(vk_control);

key_dash = keyboard_check(vk_shift);
key_dash_pressed = keyboard_check_pressed(vk_shift);
can_dash = dash_time &amp;&amp; (blue &gt; 0 || min_dashtime &gt; 0)
        &amp;&amp; place_meeting(x,y+1,obj_wall) &amp;&amp; jump == 0;

//Shoots Projectile-------------------------
can_shoot = shoot_time &amp;&amp; (red &gt; 0 || min_shotspeed &gt; 0)
        &amp;&amp; place_meeting(x,y+1,obj_wall) &amp;&amp; jump == 0;
if (can_shoot &amp;&amp; (key_shoot_pressed || shooting)) {
    can_act = false;
    shoot = false;
    shooting = key_shoot;    
    
    if (key_shoot_pressed) {
        angle = pi/2;
        bar = instance_create(x + image_xscale * 50, y - 25, obj_proj_gauge);
    }
    else if (angle &gt; 0 &amp;&amp; shooting) {
        angle -= pi/24;
        
    }
    else {
        shoot = true;
        shooting = false;
    }
    with (bar) {
        image_xscale = obj_player.image_xscale ;
        image_angle = radtodeg(obj_player.image_xscale * obj_player.angle);
    }
    
    
}        
if (shoot) {
    with (bar) {instance_destroy(); }
    inst = instance_create(x + image_xscale * 50, y - 25, obj_proj_player);
    with (inst) {
        angle = obj_player.angle;
        max_shotspeed = obj_player.max_shotspeed;
        min_shotspeed = obj_player.min_shotspeed + 3 ;
        
        sp = max_shotspeed * obj_player.red / (instance_number(obj_enemy_red) + obj_player.red)
            + min_shotspeed * instance_number(obj_enemy_red) / (instance_number(obj_enemy_red) + obj_player.red);

        hsp = sp * obj_player.image_xscale * cos(angle);
        vsp = -sp * sin(angle);
        grav = .7;
    }
    shoot_time = false
    shoot = false;
    alarm[0] = 36;
    alarm[1] = 12;
}
//------------------------------------------

//************************************************************************
//Calculate movement******************************************************
else if (can_act &amp;&amp; key_dash_pressed &amp;&amp; can_dash || dashing) {
    dashing = key_dash;
    
    if (dashing) {
        movespeed = dashspeed;
        vsp = 0;
        vsp -= grav;
        move = image_xscale;
    }
}

else if (can_act) {
    move = key_left + key_right;                                         
    
    //Jump code**********************************
    if (place_meeting(x,y+1,obj_wall)) { //If player on ground
        movespeed = run_speed;
    
        if (jump == 6) {
            jump = 0;
        }
    
        if (key_jump_pressed &amp;&amp; jump == 0) {
            jump = 1;
        }
        else if (jump &gt;= 1 &amp;&amp; jump &lt; 5) {
            if (!key_jump) {
                jumpShort = true;
            }
            jump++;
        }
        else if (jump == 5) {
            vsp = -jumpspeed;
            jumpShort = false;
            jump = 0;
            
            if (!jumpShort) {
               jump = 6;
            }
        }
    }
    else {
        if (movespeed &gt; air_speed) {
            movespeed -= .5;
        }
    }
    
    if (jump == 6) {
        if (key_jump &amp;&amp; vsp &lt; -1) {
            numYellow = instance_number(obj_yellow) + instance_number(obj_enemy_yellow);
            
            agrav_min = (grav - power(jumpspeed - 2, 2) / (2 * min_height))
             * (numYellow) / (numYellow + yellow);
            agrav_here = (grav - power(jumpspeed - 1, 2) / (2 * max_height))
             * yellow / (numYellow + yellow);
             
            agrav = agrav_here + agrav_min;
            vsp -= agrav;
        }
        else {
            jump = 0;
        }
    }
    //*******************************************
}
else {
    move = 0;
}

vsp += grav;
hsp = move * movespeed;
    
//Prevents wall overlap************************************
if (place_meeting(x + hsp,y,obj_wall)) {
    while(!place_meeting(x + sign(hsp),y,obj_wall)) {
        x += sign(hsp);
    }
    hsp = 0;
}

if (place_meeting(x,y + vsp,obj_wall)) {
    while(!place_meeting(x,y + sign(vsp),obj_wall)) {
        y += sign(vsp);
    }
    vsp = 0;
}
//*********************************************************

x += hsp;
y += vsp;
//************************************************************************
//************************************************************************


//Handles sprites based on movement------------------------
if (abs(hsp) &gt; 0) {
    image_xscale = sign(hsp);
}

if (place_meeting(x + image_xscale * 1,y+1,obj_wall)) { //If on ground
    if (jump = 0) {
        if (hsp == 0) {
            sprite_index = spr_player;
        }
        else if(hsp != 0) {
            sprite_index = spr_player_walk;
        }
    }
    else { 
        sprite_index = spr_player_jump
    }
}
else { //In air
    if (vsp &lt; 0) {
        sprite_index = spr_player_rise
    }
    else {
        sprite_index = spr_player_fall
    }
}
if (dashing) {
    sprite_index = spr_player_dash;
}
//---------------------------------------------------------
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sprite_index == spr_player_fall || sprite_index == spr_player_rise) {
    image_index = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
