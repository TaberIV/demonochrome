//Shoots Projectile-------------------------
if (can_shoot && (key_shoot_pressed || shooting)) {    
    if (key_shoot_pressed) {
        angle = pi/2;
        bar = instance_create(x + image_xscale * 50, y - 25, obj_proj_gauge);
    }
    else if (angle > 0 && shooting) {
        angle -= pi/24;
    }
    else {
        shoot = true;
        shooting = false;
    }
    with (bar) {
        image_xscale = obj_player.image_xscale;
        image_angle = radtodeg(obj_player.image_xscale * obj_player.angle);
    }
    
    
}        
if (shoot) {
    with (bar) {instance_destroy(); }
    inst = instance_create(x + image_xscale * 50, y - 25, obj_proj_player);
    with (inst) {
        angle = obj_player.angle;
        max_shotspeed = obj_player.max_shotspeed;
        min_shotspeed = obj_player.min_shotspeed + 3 ;
        
        sp = max_shotspeed * obj_player.red / (instance_number(obj_enemy_red) + obj_player.red)
            + min_shotspeed * instance_number(obj_enemy_red) / (instance_number(obj_enemy_red) + obj_player.red);

        hsp = sp * obj_player.image_xscale * cos(angle);
        vsp = -sp * sin(angle);
        grav = .7;
    }
    shoot_time = false
    shoot = false;
    alarm[0] = 36;
    alarm[1] = 12;
}
//------------------------------------------

//************************************************************************
//Calculate movement******************************************************
else if (can_act && key_dash_pressed && can_dash || dashing) {
    dashing = key_dash;
        
    dashtime = min_dashtime * instance_number(obj_enemy_blue) / (instance_number(obj_enemy_blue) + blue)
            + max_dashtime * blue / (instance_number(obj_enemy_blue) + blue);
    
    if (key_dash_pressed) {
        alarm[2] = dashtime;
    }
    
    if (dashing) {
        movespeed = dashspeed;
        vsp = 0;
        vsp -= grav;
        move = image_xscale;
    }
    else {
        alarm[2] = dash_pause;
        can_dash = false;
        dash_timer = false;
    }
}

//Attack---------------------------------------------------------------------------------
else if ((can_act && key_attack_pressed && place_meeting(x,y+1,obj_wall)) || attack > 0) { 
    can_act = false;
    move = 0;
    
    if (attack == 0) {
        inst = instance_create(x,y, obj_player_attack);
        with (inst) {
            image_xscale = obj_player.image_xscale;
        }
    }
    attack++;
    if (attack == 5) {
        with (obj_player_attack) {
            instance_destroy();
        }
        can_act = true;
        attack = 0;
    }
}
//---------------------------------------------------------------------------------------

else if (can_act) {
    move = key_left + key_right;                                         
    
    //Jump code**********************************
    if (place_meeting(x,y+1,obj_wall)) { //If player on ground
        movespeed = run_speed;
    
        if (jump == 6) {
            jump = 0;
        }
    
        if (key_jump_pressed && jump == 0) {
            jump = 5;
            hsp = 0;
        }
        else if (jump >= 1 && jump < 5) {
            if (!key_jump) {
                jumpShort = true;
            }
            jump++;
            hsp = 0;
        }
        if (jump == 5) {
            vsp = -jumpspeed;
            jumpShort = false;
            jump = 0;
            hsp = 0;
            
            if (!jumpShort) {
               jump = 6;
            }
        }
    }
    else {
        if (movespeed > air_speed) {
            if (movespeed = dashspeed) {
                movespeed = run_speed;
            }
            movespeed -= .5;
        }
    }
    
    if (jump == 6) {
        if (key_jump && vsp < -1) {
            numYellow = instance_number(obj_yellow) + instance_number(obj_enemy_yellow);
            
            agrav_min = (grav - power(jumpspeed - 2, 2) / (2 * min_height))
             * (numYellow) / (numYellow + yellow);
            agrav_here = (grav - power(jumpspeed - 1, 2) / (2 * max_height))
             * yellow / (numYellow + yellow);
             
            agrav = agrav_here + agrav_min;
            vsp -= agrav;
        }
        else {
            jump = 0;
        }
    }
    //*******************************************
}
else {
    move = 0;
}

vsp += grav;
if (!knocked) {
    hsp = move * movespeed;
}

//Prevents wall overlap************************************
if (place_meeting(x + hsp,y,obj_wall)) {
    while(!place_meeting(x + sign(hsp),y,obj_wall)) {
        x += sign(hsp);
    }
    hsp = 0;
    
}

if (place_meeting(x,y + vsp,obj_wall)) {
    while(!place_meeting(x,y + sign(vsp),obj_wall)) {
        y += sign(vsp);
    }
    vsp = 0;
}
//*********************************************************

x += hsp;
y += vsp;
//************************************************************************
//************************************************************************


//Handles sprites based on movement------------------------
if (abs(hsp) > 0 && !knocked) {
    image_xscale = sign(hsp);
}

if (place_meeting(x,y+1,obj_wall)) { //If on ground
    if (jump = 0) {
        if (hsp == 0 && attack == 0) {
            sprite_index = spr_player;
        }
        else if(hsp != 0) {
            sprite_index = spr_player_walk;
        }
        else if (attack > 0) {
            sprite_index = spr_player_attack;
        }
    }
    else { 
        sprite_index = spr_player_jump
    }
}
else { //In air
    if (vsp < 0) {
        sprite_index = spr_player_rise
    }
    else {
        sprite_index = spr_player_fall
    }
}
if (dashing) {
    sprite_index = spr_player_dash;
}
//---------------------------------------------------------